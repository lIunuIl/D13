"""
Django settings for news_portal project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")  # 'django-insecure-mk9bz*y2v8b0_!5i2-me2lln1sgn@2t$-==96idsh&a*3dos5s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

DEFAULT_FROM_EMAIL = 'goldenteacherr@yandex.ru'

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
]

ROOT_URLCONF = 'news_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # []
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_URL = '/accounts/login/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

WSGI_APPLICATION = 'news_portal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")  # 'goldenteacherr'
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")  # 'xbanhatejsgingd'
EMAIL_USE_SSL = True

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'info_format': {
            'style': '{',
            'format': '{asctime} | {levelname} | {module} | {message}',
        },
        'debug_format': {
            'style': '{',
            'datetime': '%Y.%m.%d %H.%M.%S',
            'format': '{asctime} | {levelname} | {message}',
        },
        'warning_format': {
            'style': '{',
            'datetime': '%Y.%m.%d %H.%M.%S',
            'format': '{asctime} | {levelname} | {message} | {pathname}',
        },
        'error_format': {
            'style': '{',
            'datetime': '%Y.%m.%d %H.%M.%S',
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
        },
        'critical_format': {
            'style': '{',
            'datetime': '%Y.%m.%d %H.%M.%S',
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
        },
        'email_format': {
            'style': '{',
            'datetime': '%Y.%m.%d. $H.%M.%S',
            'format': '{asctime} | {levelname} | {message} | {pathname}',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequiredDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequiredDebugFalse',
        },
    },
    'handlers': {
        'info_console': {
            'level': 'INFO',
            'filters': '[require_debug_true]',
            'class': 'logging.StreamHandler',
            'formatter': 'info_format',
        },
        'debug_console': {
            'level': 'DEBUG',
            'filters': '[require_debug_true]',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_format',
        },
        'warning_console': {
            'level': 'WARNING',
            'filters': '[require_debug_true]',
            'class': 'logging.StreamHandler',
            'formatter': 'warning_format',
        },
        'error_console': {
            'level': 'ERROR',
            'filters': '[require_debug_true]',
            'class': 'logging.StreamHandler',
            'formatter': 'error_format',
        },
        'critical_console': {
            'level': 'CRITICAL',
            'filters': '[require_debug_true]',
            'class': 'logging.StreamHandler',
            'formatter': 'critical_format',
        },
        'general_log': {
            'level': 'INFO',
            'filters': '[require_debug_false]',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'info_format',
        },
        'error_log': {
            'level': 'ERROR',
            'filters': '[require_debug_true]',
            'class': 'logging.FileHandler',
            'filename': 'error.log',
            'formatter': 'error_format',
        },
        'security_log': {
            'level': 'INFO',
            'filters': '[require_debug_true]',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'info_format',
        },
        'send_mail': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': '[require_debug_true]',
            'formatter': 'email_format',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['info_console', 'general_log'],
            'level': 'DEBUG',
        },
        'console_debug': {
            'handlers': ['debug_console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'console_warning': {
            'handlers': ['warning_console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'console_error': {
            'handlers': ['error_console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'console_critical': {
            'handlers': ['critical_console'],
            'level': 'CRITICAL',
            'propagate': False,
        },
        'general_file': {
            'handlers': ['general_log'],
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['error_log', 'send_email'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['error_log', 'send_email'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['error_log'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db_backends': {
            'handles': ['error_log'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_log'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
